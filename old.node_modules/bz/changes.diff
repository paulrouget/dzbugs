diff --git a/Jakefile.js b/Jakefile.js
index 5797365..1b7a7ae 100644
--- a/Jakefile.js
+++ b/Jakefile.js
@@ -1,28 +1,28 @@
 /*
-  Turns CommonJS package into a browser file.
+  Turns CommonJS package into a browser file and minifies.
   
   uses node-jake http://github.com/mde/node-jake
   run with 'jake [build|minify|clean]'
 */
 var fs = require("fs"),
     path = require("path"),
-    sys = require("sys");
+    sys = require("sys")
+    build = require("./build");
+   
+var pkg = JSON.parse(fs.readFileSync("package.json")); 
+var prefix = pkg.name + "-" + pkg.version;
 
-task('build', [], function (name, dest) {
+task('build', [], function (dest) {
   sys.puts("building...");
-  var pkg = getPackage();
-  name = name || pkg.name;
-  dest = dest || name + ".js";
+  dest = dest || prefix + ".js";
 
-  var code = "var " + name + " = " + getCode(pkg.main + ".js", " ");
-  fs.writeFileSync(dest, code, "utf-8");
+  build.build(dest);
   sys.puts("> " + dest);
 });
 
 task('minify', [], function (file, dest) {
-  var name = getPackage().name;
-  file = file || name + ".js";
-  dest = dest || name + ".min.js";
+  file = file || prefix + ".js";
+  dest = dest || prefix + ".min.js";
 
   var minified = minify(fs.readFileSync(file, "utf-8"));
   fs.writeFileSync(dest, minified, "utf-8");
@@ -30,39 +30,10 @@ task('minify', [], function (file, dest) {
 });
 
 task('clean', [], function () {
-  var name = getPackage().name;
-  fs.unlink(name + ".js");
-  fs.unlink(name + ".min.js");
+  fs.unlink(prefix + ".js");
+  fs.unlink(prefix + ".min.js");
 });
 
-
-function getPackage() {
-  return JSON.parse(fs.readFileSync("package.json"));
-}
-
-function getCode(file, indent) {
-  sys.puts(indent + file);
-  var code = fs.readFileSync(file, "utf-8");
-
-  // replace all the require("mod")s with their code
-  // can't handle dep cycles
-  var re = /require\(["'](.+?)["']\)/g;
-  function expand(match, mod) {
-    if(mod.indexOf(".") != 0)
-      return "window"; // external dep, assume it will be global
-    var dep = path.join(path.dirname(file), mod + ".js");
-    return getCode(dep, indent + "    ");
-  }
-  code = code.replace(re, expand);
-
-  return "(function() {\n\
-    var module = { exports: {}};\n\
-    var exports = module.exports;\n"
-    + code +
-   "\nreturn module.exports;\
-   })()";  
-}
-
 function minify(code) {
   var uglifyjs = require("uglify-js"),
       parser = uglifyjs.parser,
diff --git a/lib/bz.js b/lib/bz.js
index a800995..e6cd489 100644
--- a/lib/bz.js
+++ b/lib/bz.js
@@ -81,12 +81,15 @@ BugzillaClient.prototype = {
     }
     if(params)
       url += "?" + this.urlEncode(params);
+      
     body = JSON.stringify(body);
-    
+   
+   /*  
     try {
       XMLHttpRequest = require("xhr").XMLHttpRequest; // Addon SDK
     }
     catch(e) {}
+   */
 
     var that = this;
     if(typeof XMLHttpRequest != "undefined") {
@@ -148,9 +151,16 @@ BugzillaClient.prototype = {
   
   urlEncode : function(params) {
     var url = [];
-    for(var param in params)
-      url.push(encodeURIComponent(param) + "=" +
-        encodeURIComponent(params[param]));
+    for(var param in params) {
+      var values = params[param];
+      if(!values.forEach)
+        values = [values];
+      // expand any arrays
+      values.forEach(function(value) {
+         url.push(encodeURIComponent(param) + "=" +
+           encodeURIComponent(value));
+      });
+    }
     return url.join("&");
   }
 }
diff --git a/package.json b/package.json
index e1d0731..1d65454 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "bz",
     "description": "Bugzilla REST API wrapper",
-    "version": "0.2.0",
+    "version": "0.2.1",
     "author": "Heather Arthur <fayearthur@gmail.com>",
     "keywords": ["bugzilla"],
     "repository": {
@@ -14,7 +14,8 @@
     },
     "devDependencies": {
         "request": "*",
-        "connect": "*"
+        "connect": "*",
+        "browserify": ">=1.0.0"
     },
     "id": "jid0-3MhY9xRVhRU80IsfUnZKLeIo5c0"
 }
\ No newline at end of file
diff --git a/test/browser/files/index.js b/test/browser/files/index.js
index 961db0c..33af22e 100644
--- a/test/browser/files/index.js
+++ b/test/browser/files/index.js
@@ -17,7 +17,10 @@ function testBz() {
   });
 
   bugzilla.getBug(9955, function(error, bug) {
-    bug.summary = "new summary";
+    bug = {
+       update_token: bug.update_token,
+       summary: 'new summary'
+    }
     bugzilla.updateBug(9955, bug, function(error, ok) {
       if(error)
         $("#update-bug .fail").addClass("true");
diff --git a/test/browser/runbrowser.js b/test/browser/runbrowser.js
index cd43d26..b1f5967 100644
--- a/test/browser/runbrowser.js
+++ b/test/browser/runbrowser.js
@@ -1,46 +1,14 @@
 var connect = require('connect'),
     fs = require("fs"),
     path = require("path"),
-    sys = require("sys");
+    build = require("../../build");
 
 var root = path.join(__dirname, "files");
-build(path.resolve(__dirname, "../../package.json"));
+
+build.build(path.join(root, "bz.js"));
 
 connect.createServer(
-  connect.staticProvider({ root: root, cache: true })
+  connect.static(root)
 ).listen(3000);
 
-sys.puts("visit http://127.0.0.1:3000/index.html");
-
-function build(pkgFile, name, dest) {
-  sys.puts("building...");
-  var pkg = JSON.parse(fs.readFileSync(pkgFile || "package.json"));
-  name = name || pkg.name;
-  dest = dest || path.join(root, name + ".js");
-  var code = "var " + name + " = " + getCode(pkg.main + ".js", " ");
-  fs.writeFileSync(dest, code, "utf-8");
-  sys.puts("> " + dest);
-};
-
-function getCode(file, indent) {
-  sys.puts(indent + file);
-  var code = fs.readFileSync(file, "utf-8");
-
-  // replace all the require("mod")s with their code
-  // can't handle dep cycles
-  var re = /require\(["'](.+?)["']\)/g;
-  function expand(match, mod) {
-    if(mod.indexOf(".") != 0)
-      return "window"; // external dep, assume it will be global
-    var dep = path.join(path.dirname(file), mod + ".js");
-    return getCode(dep, indent + "    ");
-  }
-  code = code.replace(re, expand);
-
-  return "(function() {\n\
-    var module = { exports: {}};\n\
-    var exports = module.exports;\n"
-    + code +
-   "\nreturn module.exports;\
-   })()";  
-}
\ No newline at end of file
+console.log("visit http://127.0.0.1:3000/index.html");
\ No newline at end of file
diff --git a/test/sanity/bug.js b/test/sanity/bug.js
index 94dbff6..bc9b15f 100644
--- a/test/sanity/bug.js
+++ b/test/sanity/bug.js
@@ -40,8 +40,10 @@ bugzilla.createBug({
 
 bugzilla.getBug(9955, function(error, bug) {
   assert.ok(!error, error);
-  bug.summary = "new summary";
-
+  bug = {
+     update_token: bug.update_token,
+     summary: 'new summary'
+  }
   bugzilla.updateBug(9955, bug, function(error, ok) {
     assert.ok(!error, error);
     assert.ok(ok);
